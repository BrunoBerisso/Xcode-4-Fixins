* BEFORE YOU BEGIN

Do I have to spell it out? Surely we're all programmers here!
Nevertheless - no warranty, it has bugs, it will probably blow up in
your face, add you might lose data when it does.

Also, uninstall it and try again before sending Apple bug reports
about something you encounter. Isn't it obvious from the state of
Xcode 4.x that they already have plenty on their plate already? Please
don't make things worse for them by wasting their time with my bugs as
well.

* User Scripts Fixin

The fixin adds a new =Scripts= menu to Xcode 4.x. It works a little
bit like the Xcode 3.x one.

* Adding scripts

The Scripts fixin looks in =~/Library/Application
Support/Developer/Shared/Xcode/scripts/= for executable files, or
symlinks to them. Any it finds have their names added to the new
=Scripts= menu. 

* Running scripts

Select script from the menu, and the script runs. The current
selection is passed to the script as its standard input.

The script's standard output replaces the current selection. Any
standard error output is ignored.

* Refreshing scripts

At the bottom of the Scripts menu, there's an option =Refresh=. This
re-reads the contents of the scripts directory, re-reads the script
options (see below), and rebuilds the menu. So if you change anything,
or add or remove scripts, no need to restart, just select that option.

* Script options

You can add script options (including key equivalents) to your scripts
by adding a file called =scripts.xml= in your scripts folder. It is an
XML-style properly list, and it goes a bit like this:

#+BEGIN_EXAMPLE
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Test Script</key>
	<dict>
	  <key>keyEquivalent</key>
	  <string>C-M-5</string>
	</dict>
	<key>Insert Separator</key>
	<dict>
	  <key>keyEquivalent</key>
	  <string>C-M-/</string>
	</dict>
</dict>
</plist>
#+END_EXAMPLE

The key for the top-level dict is the name of the script (as shown on
the menu), and each value is another dict holding script-specific
options.

The current option names are:

- =keyEquivalent= :: specify key equivalent. Use emacs notation:
     modifier keys first (=C= for Control, =M= for Option, =s= for
     Command, =S= for Shift), separated by =-=, then the key.

     (For example, =C-M-5= is Ctrl-Option-5. =s-C= is Command-C. etc.)

And... erm... that's it. Well, so far.

* Misfeatures

- If your focus is on something other than the text editor, the output
  goes to the text editor anyway.

- If you have two windows showing the same file, the user scripts
  might not work, as the fixin can't figure out which text view is the
  one you're interacting with.
